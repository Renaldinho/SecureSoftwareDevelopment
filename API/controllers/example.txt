using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;

namespace ssd_authorization_solution.Controllers;

public class TokenService
{
    // Hardcoded 256-bit secret key
    private const string SecretKey = "4E3A2F9C27A6B8D9F1A2C3E4D7B4C5A8F0A9B8C7D6E4F3A1C2B3D9F4E5A6B7C8";

    // Method to create a JWT token
    public string CreateToken(string username, string role)
    {
        var key = Encoding.UTF8.GetBytes(SecretKey);

        // Define the claims for the token
        var claims = new List<Claim>
        {
            new Claim(JwtRegisteredClaimNames.NameId, username),
            new Claim("role", role)
        };

        // Signing credentials using HMAC-SHA256
        var creds = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256);

        // Token descriptor with claims and expiration
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(claims),
            Expires = DateTime.Now.AddDays(7),  // Token valid for 7 days
            SigningCredentials = creds
        };

        // Create the token
        var tokenHandler = new JwtSecurityTokenHandler();
        var token = tokenHandler.CreateToken(tokenDescriptor);

        // Return the token as a string
        return tokenHandler.WriteToken(token);
    }
}